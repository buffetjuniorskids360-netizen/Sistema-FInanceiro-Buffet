üöÄ Prompt Completo para Configura√ß√£o no Replit - Buffet Juniors Kids

Act as a **Replit Deployment Specialist** with expertise in full-stack JavaScript applications. You have been provided with the complete documentation for the "Buffet Juniors Kids - Sistema de Gest√£o Financeira" project and must configure it to run perfectly on Replit. Follow these instructions EXACTLY:

---

## üìå INFORMA√á√ïES DO PROJETO (J√Å FORNECIDAS)

### Vis√£o Geral
- **Nome**: Buffet Juniors Kids - Sistema de Gest√£o Financeira
- **Descri√ß√£o**: Sistema completo de gest√£o para buffet infantil que automatiza controle de eventos, clientes, pagamentos e finan√ßas
- **Stack T√©cnica**:
  - Backend: Node.js 18+, Express, Prisma ORM
  - Frontend: React 18+, TypeScript 5+, Vite
  - Banco de Dados: PostgreSQL 14+
  - Autentica√ß√£o: JWT
  - Upload de Arquivos: Multer

### Estrutura do Projeto

Sistema Financeiro/
‚îú‚îÄ‚îÄ api/
‚îú‚îÄ‚îÄ controllers/
‚îú‚îÄ‚îÄ frontend/ (React app)
‚îú‚îÄ‚îÄ middlewares/
‚îú‚îÄ‚îÄ models/
‚îú‚îÄ‚îÄ prisma/ (schema.prisma)
‚îú‚îÄ‚îÄ public/
‚îÇ ‚îî‚îÄ‚îÄ uploads/ (para arquivos)
‚îú‚îÄ‚îÄ services/
‚îú‚îÄ‚îÄ utils/
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ server.js
‚îî‚îÄ‚îÄ README.md

---

## üõ†Ô∏è INSTRU√á√ïES ESPEC√çFICAS PARA CONFIGURA√á√ÉO NO REPLIT

### 1. CRIE OS ARQUIVOS NECESS√ÅRIOS

**1.1 Crie o arquivo `replit.nix` na RAIZ do projeto com:**
```nix
{ pkgs }: {
  deps = [
    pkgs.nodejs-18_x
    pkgs.nodePackages.typescript
    pkgs.nodePackages.prisma
    pkgs.nodePackages.@prisma/client
    pkgs.postgresql
    pkgs.libpq
    pkgs.openssl
    pkgs.vite
  ];
  devSh = "export DATABASE_URL='postgresql://replit:replit@localhost:5432/buffet_juniors_kids'"
}

1.2 Crie o arquivo .replit na RAIZ com:

[run]
command = "bash start-replit.sh"

1.3 Crie o arquivo start-replit.sh na RAIZ com PERMISS√ÉO DE EXECU√á√ÉO (chmod +x start-replit.sh):

#!/bin/bash
# Configura√ß√£o completa para Buffet Juniors Kids no Replit

echo "üöÄ Iniciando configura√ß√£o do Buffet Juniors Kids no Replit..."

# 1. Iniciar PostgreSQL
echo "üêò Iniciando PostgreSQL..."
sudo service postgresql start
sudo -u postgres psql -c "CREATE USER replit WITH PASSWORD 'replit';" || true
sudo -u postgres psql -c "ALTER USER replit WITH SUPERUSER;" || true
sudo -u postgres psql -c "CREATE DATABASE buffet_juniors_kids OWNER replit;" || true

# 2. Verificar e criar pastas necess√°rias
echo "üìÅ Criando estrutura de diret√≥rios..."
mkdir -p public/uploads
chmod -R 777 public/uploads

# 3. Instalar depend√™ncias do backend
echo "üì¶ Instalando depend√™ncias do backend..."
npm install

# 4. Instalar depend√™ncias do frontend
echo "üì¶ Instalando depend√™ncias do frontend..."
if [ -d "frontend" ]; then
  cd frontend
  npm install
  cd ..
else
  echo "‚ö†Ô∏è Diret√≥rio frontend n√£o encontrado. Criando um novo projeto React..."
  npm create vite@latest frontend -- --template react-ts
  cd frontend
  npm install
  npm install @radix-ui/react-icons lucide-react @tanstack/react-query
  cd ..
fi

# 5. Configurar vari√°veis de ambiente
echo "üîë Configurando vari√°veis de ambiente..."
if [ ! -f ".env" ]; then
  echo "DATABASE_URL=\"postgresql://replit:replit@localhost:5432/buffet_juniors_kids\"" > .env
  echo "PORT=3000" >> .env
  echo "NODE_ENV=development" >> .env
  echo "JWT_SECRET=\"$(node -e \"console.log(require('crypto').randomBytes(64).toString('hex'))\")\"" >> .env
  echo "UPLOAD_PATH=\"/home/runner/public/uploads\"" >> .env
  echo "MAX_FILE_SIZE=10485760" >> .env
  echo "CORS_ORIGIN=\"https://\$REPL_SLUG.\$REPL_OWNER.repl.co\"" >> .env
fi

# 6. Executar migra√ß√µes do Prisma
echo "üîÑ Executando migra√ß√µes do Prisma..."
npx prisma generate
npx prisma migrate dev --name init

# 7. Iniciar os servidores
echo "üöÄ Iniciando aplica√ß√µes..."
npm install -g concurrently
concurrently "npm run backend" "cd frontend && npm run dev"

# Diagn√≥stico final
echo "‚úÖ Configura√ß√£o conclu√≠da!"
echo "Backend rodando em: https://\$REPL_SLUG.\$REPL_OWNER.repl.co"
echo "Frontend rodando em: https://\$REPL_SLUG.\$REPL_OWNER.repl.co"

1.4 Crie o arquivo package.json na RAIZ se n√£o existir:

{
  "name": "buffet-juniors-kids",
  "version": "1.0.0",
  "description": "Sistema de Gest√£o Financeira para Buffet Infantil",
  "main": "server.js",
  "scripts": {
    "build": "cd frontend && npm run build",
    "dev": "concurrently \"npm run backend\" \"cd frontend && npm run dev\"",
    "backend": "node server.js",
    "db:init": "sudo service postgresql start && psql -U replit -c 'CREATE DATABASE buffet_juniors_kids;' || true"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@prisma/client": "^5.0.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.0",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "multer": "^1.4.5-lts.1",
    "pg": "^8.11.0",
    "prisma": "^5.0.0"
  },
  "devDependencies": {
    "concurrently": "^8.2.0"
  }
}

1.5 Crie o arquivo server.js na RAIZ se n√£o existir:

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Configura√ß√£o CORS
const corsOptions = {
  origin: process.env.CORS_ORIGIN || 'https://localhost:5173',
  credentials: true
};
app.use(cors(corsOptions));

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Rotas b√°sicas para teste
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', message: 'Backend funcionando!' });
});

// Servir arquivos est√°ticos (uploads)
app.use('/uploads', express.static(path.join(__dirname, 'public', 'uploads')));

// Rota 404
app.use((req, res) => {
  res.status(404).json({ error: 'Rota n√£o encontrada' });
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`‚úÖ Servidor rodando na porta ${PORT}`);
  console.log(`üìå URL: http://localhost:${PORT}`);
});

2. CONFIGURA√á√ÉO DE SECRETS NO REPLIT
Instrua o usu√°rio a configurar estes SECRETS no Replit (n√£o use .env):

DATABASE_URL = postgresql://replit:replit@localhost:5432/buffet_juniors_kids
JWT_SECRET = [VALOR_GERADO_ALEATORIO]
NODE_ENV = development
PORT = 3000
CORS_ORIGIN = https://[SEU_REPL].replit.dev
UPLOAD_PATH = /home/runner/public/uploads
MAX_FILE_SIZE = 10485760

Como gerar JWT_SECRET:

Abra o console do Replit
Execute: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
Copie o resultado e cole como valor de JWT_SECRET nos Secrets
3. CONFIGURA√á√ÉO ESPEC√çFICA PARA UPLOAD DE ARQUIVOS
Solu√ß√£o para permiss√µes no Replit:

Crie o diret√≥rio de uploads:

mkdir -p public/uploads

Defina permiss√µes adequadas:

chmod -R 777 public/uploads

Configure UPLOAD_PATH no .env:

UPLOAD_PATH="/home/runner/public/uploads"

4. RESOLU√á√ÉO DE PROBLEMAS COMUNS NO REPLIT
Problema: "FATAL: Peer authentication failed for user 'replit'"

Solu√ß√£o: Execute no console:

sudo -u postgres psql -c "CREATE USER replit WITH PASSWORD 'replit';"
sudo -u postgres psql -c "ALTER USER replit WITH SUPERUSER;"

Problema: "EACCES: permission denied" para uploads

Solu√ß√£o: Execute:

chmod -R 777 public/uploads

Problema: "Error: connect ECONNREFUSED 127.0.0.1:5432"

Solu√ß√£o: Execute:

sudo service postgresql start

Problema: CORS errors entre frontend e backend

Solu√ß√£o: Configure CORS_ORIGIN nos Secrets como:

CORS_ORIGIN = https://[SEU_REPL].replit.dev

5. CHECKLIST DE VERIFICA√á√ÉO FINAL
Arquivo replit.nix criado corretamente
Arquivo start-replit.sh com permiss√£o de execu√ß√£o
Secrets configurados no Replit
PostgreSQL iniciado automaticamente
Permiss√µes de upload configuradas
Migra√ß√µes do Prisma executadas
Backend na porta 3000 e frontend na 5173
Proxy configurado corretamente
üìù REGRAS PARA SUA RESPOSTA
N√ÉO EXPLIQUE - APENAS FORNE√áA OS ARQUIVOS: Voc√™ deve gerar os arquivos EXATOS que precisam ser criados
TODOS OS ARQUIVOS DEVEM SER PRONTOS PARA COPIAR/COLAR: Sem placeholders, com conte√∫do funcional
INCLUA COMENT√ÅRIOS EXPLICATIVOS NOS ARQUIVOS: Para que o usu√°rio entenda cada parte
DESTAQUE OS 3 PASSOS MAIS CR√çTICOS: No in√≠cio da resposta, liste os 3 passos que N√ÉO podem ser pulados
FINALIZE COM UM RESUMO DE TROUBLESHOOTING: Os 3 problemas mais comuns e suas solu√ß√µes
üëâ Sua resposta deve come√ßar com: "Configura√ß√£o Replit para Buffet Juniors Kids - Sistema de Gest√£o Financeira est√° pronta. Siga ESTES 3 PASSOS CR√çTICOS primeiro:"

Configure os SECRETS no Replit (DATABASE_URL, JWT_SECRET, etc.)
D√™ permiss√£o de execu√ß√£o ao start-replit.sh: chmod +x start-replit.sh
Execute ./start-replit.sh para iniciar a configura√ß√£o autom√°tica

Este prompt cont√©m **todas as informa√ß√µes espec√≠ficas do projeto** que voc√™ me enviou, j√° adaptadas para o ambiente do Replit. Basta voc√™ copiar este prompt completo e enviar para o agente AI no Replit - ele ir√° criar automaticamente todos os arquivos necess√°rios com as configura√ß√µes corretas para o seu projeto "Buffet Juniors Kids".

O prompt inclui:
- Configura√ß√£o espec√≠fica do PostgreSQL no Replit
- Scripts de inicializa√ß√£o automatizados
- Solu√ß√µes para problemas comuns do Replit (permiss√µes, CORS, etc.)
- Estrutura de diret√≥rios completa
- Configura√ß√£o de Secrets (n√£o use .env no Replit)
- Comandos prontos para copiar/colar

√â um prompt "pronto para uso" que j√° incorpora todas as informa√ß√µes do seu projeto que voc√™ compartilhou no arquivo.